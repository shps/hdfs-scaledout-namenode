# How to install chef server...
# https://github.com/pikesley/catering-college

# How to install chef-server using chef-solo:
# http://wiki.opscode.com/display/chef/Installing+Chef+Server+using+Chef+Solo

# for install_gem in gems
#   cookbook_file "#{Chef::Config[:file_cache_path]}/#{install_gem}.gem" do
#     source "#{install_gem}.gem"
#     owner node[:chef][:user]
#     group node[:chef][:user]
#     mode 0755
#     action :create_if_missing
#   end
#   gem_package "#{install_gem}" do
#     source "#{Chef::Config[:file_cache_path]}/#{install_gem}.gem"
#     action :install
#   end
# end

user  node[:chef][:user] do
  action :create
  shell "/bin/bash"
  supports :manage_home=>true
  home "/home/#{node[:chef][:user]}"
end

bash "add_chef_user_sudoers" do
code <<-EOF
echo "#{node[:chef][:user]} ALL = (root) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/#{node[:chef][:user]}
sudo chmod 0440 /etc/sudoers.d/#{node[:chef][:user]}
EOF
end


# package "make" do
#   action :install
# end

# package "g++" do
#   action :install
# end

# # For amqp
# bash "install_libgecode" do
# code <<-EOF
#     curl http://apt.opscode.com/packages@opscode.com.gpg.key | sudo apt-key add -
#     sudo apt-get update -y
#     sudo apt-get install libgecode-dev -y
# EOF
# end

# # For Nokogiri
# package "libxml2-dev" do
#   action :install
# end
# # For Nokogiri
# package "libxslt-dev" do
#   action :install
# end

 for install_package in "readline-common libreadline-dev expect expect-dev bind9utils ncurses-dev openssl wget"
   package "#{install_package}" do
     action :install
   end
 end

# for install_gem in node[:chef][:gems]
#   cookbook_file "#{Chef::Config[:file_cache_path]}/#{install_gem}.gem" do
#     source "#{install_gem}.gem"
#     owner node[:chef][:user]
#     group node[:chef][:user]
#     mode 0755
#     action :create_if_missing
#   end
#   gem_package "#{install_gem}" do
#     source "#{Chef::Config[:file_cache_path]}/#{install_gem}.gem"
#     action :install
#   end
# end 

directory "/etc/chef" do
  owner node[:chef][:user]
  group node[:chef][:user]
  mode "755"
  action :create
  recursive true
end

template "/etc/chef/chef.json" do
  source "chef.json.erb"
  owner node[:chef][:user]
  group node[:chef][:user]
  mode 0755
end

template "/etc/chef/solo.rb" do
  source "solo.rb.erb"
  owner node[:chef][:user]
  group node[:chef][:user]
  mode 0755
end





# bash "install_chef_solo" do
# user "root"
# code <<-EOF
# mkdir /etc/chef/


# sudo true && curl -L https://www.opscode.com/chef/install.sh | sudo bash


# echo "deb http://apt.opscode.com/ `lsb_release -cs`-0.10 main" | sudo tee /etc/apt/sources.list.d/opscode.list
# sudo mkdir -p /etc/apt/trusted.gpg.d
# gpg --keyserver keys.gnupg.net --recv-keys 83EF826A
# gpg --export packages@opscode.com | sudo tee /etc/apt/trusted.gpg.d/opscode-keyring.gpg > /dev/null
# apt-get update -y
# apt-get install opscode-keyring -y
# apt-get upgrade -y

# echo "chef chef/chef_server_url string http://localhost:4000" | debconf-set-selections &&  apt-get install chef -y


# chef-solo -c /etc/chef/solo.rb -j /home/#{node[:chef][:user]}/chef.json -r http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz

# mkdir -p /home/#{node[:chef][:user]}/.chef
# cp /etc/chef/validation.pem /etc/chef/webui.pem /home/#{node[:chef][:user]}/.chef
# chown -R #{node[:chef][:user]} /home/#{node[:chef][:user]}/.chef

# echo "export KTHFS_HOME=/opt/kthfs" >> /etc/profile
# source /etc/profile
# mkdir -p $KTHFS_HOME/cookbooks
# mkdir $KTHFS_HOME/tmp
# mkdir $KTHFS_HOME/src
# mkdir $KTHFS_HOME/logs

# chown -R kthfs:chef $KTHFS_HOME
# # copy or git clone cloud-manager/fog/ironfan/serengeti-pantry/serengeti-ws repos
# # under $KTHFS_HOME/src by whatever means
# # NOTE: As the development is in progress, please check out serengeti.m1 tag
# # source code from all the repos for a stable serengeti m1 version.
# cp -rf $KTHFS_HOME/src/kthfs-ws/distribute/sbin $KTHFS_HOME/
# cp -rf $KTHFS_HOME/src/kthfs-ws/distribute/etc $KTHFS_HOME/
# cp -rf $KTHFS_HOME/src/kthfs-pantry/* $KTHFS_HOME/cookbooks/
# mkdir $KTHFS_HOME/conf
# # cp $KTHFS_HOME/src/kthfs-ws/server/kthfs/src/main/resources/log4j.properties $KTHFS_HOME/conf
# # cp $KTHFS_HOME/src/kthfs-ws/server/kthfs/src/main/resources/kthfs.properties $KTHFS_HOME/conf

# echo "#{node[:chef][:user]} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
# # remove requiretty in sudoers
# sed -i '/requiretty$/d' /etc/sudoers

# echo 'UserKnownHostsFile /dev/null' >> /etc/ssh/ssh_config
# echo 'StrictHostKeyChecking no'  >> /etc/ssh/ssh_config

# mkdir /home/#{node[:chef][:user]}/.chef
# cp /etc/chef/*.pem /home/#{node[:chef][:user]}/.chef/
# chown -R #{node[:chef][:user]} /home/#{node[:chef][:user]}/.chef
# EOF
# end

# bash "configure_chef_solo" do
# user "root"
# code <<-EOF
# /opt/vagrant_ruby/bin/chef-solo -c /etc/chef/solo.rb -j /home/#{node[:chef][:user]}/chef.json -r http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz
# EOF
# end

# # TODO - test if centos, if yes
# # echo "/usr/local/lib" >> /etc/ld.so.conf
# # ldconfig
# #service iptables stop
# #chkconfig iptables off

# bash "configure_chef_solo" do
# code <<-EOF
# cd /home/#{node[:chef][:user]}
# mkdir -p /home/#{node[:chef][:user]}/.chef
# sudo cp /etc/chef/validation.pem /etc/chef/webui.pem /home/#{node[:chef][:user]}/.chef
# sudo chown -R #{node[:chef][:user]} /home/#{node[:chef][:user]}/.chef
# EOF
# end


bash "install_chef_server" do
user "#{node[:chef][:user]}"
code <<-EOF
# mostly following this
# http://wiki.opscode.com/display/chef/Installing+Chef+Server+Manually

# needs setting on vagrant VMs for some reason
PATH=${PATH}:/usr/local/sbin:/usr/sbin:/sbin

STARTDIR=`pwd`
WEBUI_PASSWORD=prawns

# add the opscode repo
echo "deb http://apt.opscode.com/ `lsb_release -cs`-0.10 main" | \
  sudo tee /etc/apt/sources.list.d/opscode.list > /dev/null
# and their key
sudo mkdir -p /etc/apt/trusted.gpg.d
if [ ! "`gpg --list-keys | grep 83EF826A`" ]
then
  EXITSTATUS=2
  while [ ${EXITSTATUS} == 2 ]
  do
    gpg --keyserver keys.gnupg.net --recv-keys 83EF826A
    EXITSTATUS=$?
  done
fi
gpg --export packages@opscode.com | \
  sudo tee /etc/apt/trusted.gpg.d/opscode-keyring.gpg > /dev/null

# RabbitMQ repo
echo "deb http://www.rabbitmq.com/debian/ testing main" | \
  sudo tee /etc/apt/sources.list.d/rabbit.list > /dev/null
if [ ! "`sudo apt-key list | grep Rabbit`" ]
then
  cd /tmp
  wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
  sudo apt-key add rabbitmq-signing-key-public.asc
fi

### # prepare Sun java debs via this witchcraft
### # https://github.com/flexiondotorg/oab-java6
### if [ ! -e /var/local/oab/deb/sun-java6-jre* ]
### then
###   cd /tmp/
###   wget https://raw.github.com/flexiondotorg/oab-java6/master/oab-java6.sh \
###     -O oab-java6.sh
###   chmod +x oab-java6.sh 
###   sudo ./oab-java6.sh
### fi

# install some packages
sudo apt-get -y -q update
sudo apt-get -y -q install curl
sudo apt-get -y -q install build-essential
sudo apt-get -y -q install couchdb
sudo apt-get -y -q install zlib1g-dev
sudo apt-get -y -q install libxml2-dev
sudo apt-get -y -q install nginx
### sudo apt-get -y -q --force-yes install sun-java6-jre
sudo apt-get -y -q install opscode-keyring
sudo apt-get -y -q install libgecode-dev
sudo apt-get -y -q install rabbitmq-server
`java -version 2> /dev/null` || sudo apt-get -y -q install openjdk-6-jdk

# configure rabbit (if it's not already done)
[ "`sudo rabbitmqctl list_vhosts | grep chef`" ] \
  || sudo rabbitmqctl add_vhost /chef
[ "`sudo rabbitmqctl list_users | grep chef`" ] \
  || sudo rabbitmqctl add_user chef testing
sudo rabbitmqctl set_permissions -p /chef chef ".*" ".*" ".*"
# we also like the rabbit webui management thing
sudo rabbitmq-plugins enable rabbitmq_management
sudo service rabbitmq-server restart

# install rvm
# http://beginrescueend.com/rvm/install/
if [ ! -e ~/.rvm/scripts/rvm ]
then
  bash -s stable < <(curl \
    -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
fi

# install these ruby libs (if we don't already have them)
. ~/.rvm/scripts/rvm
[ -e ~/.rvm/usr/lib/libz.so ] || rvm pkg install zlib --verify-downloads 1
[ -e ~/.rvm/usr/lib/libssl.so ] || rvm pkg install openssl
[ -e ~/.rvm/usr/lib/libyaml.so ] || rvm pkg install libyaml

# check if have the right version of ruby with the correct libs available,
# if not we reinstall
! (rvm use 1.9.3 && ruby -e "require 'openssl' ; require 'zlib'" 2> /dev/null) \
  && rvm reinstall 1.9.3 && rvm use 1.9.3 --default

# install the chef gems (if we don't already have them)
for gem in chef-server chef-server-api chef-solr chef-server-webui 
do
  if [ ! "`gem list | grep \"${gem} \"`" ]
  then
    gem install ${gem} --no-ri --no-rdoc
  fi
done

# install the chef config file
sudo mkdir -p /etc/chef
sudo chown -R `whoami` /etc/chef
[ ${WEBUI_PASSWORD} ] || WEBUI_PASSWORD='password'
[ ${SERVERNAME} ] || SERVERNAME=`ip -f inet -o addr | grep eth0 \
  | tr -s ' ' ' ' | cut -d ' ' -f 4 | cut -d '/' -f 1`
cat ${STARTDIR}/files/server.rb | sed "s:SERVERNAME:${SERVERNAME}:" \
  | sed "s:PASSWORD:${WEBUI_PASSWORD}:" \
  | sudo tee /etc/chef/server.rb > /dev/null

# run the solr installer
# NOTE: THIS WILL NUKE ANY EXISTING CHEF SOLR CONFIGURATION AND DATA
sudo mkdir -p /var/chef
sudo chown -R `whoami` /var/chef
chef-solr-installer -f

# we do this so we don't have to run as root
sudo mkdir -p /var/log/chef
sudo chown -R `whoami` /var/log/chef

# setup the services
[ ${CHEF_SERVER_USER} ] || CHEF_SERVER_USER=`whoami`
# the chef gems supply some upstart scripts, but they run everything as root
# we'd rather run as whatever chef user we're using
for file in `find ~/.rvm/ | grep debian/etc/init/ | grep -v client`
do
  outfile=`basename ${file}`
  service=${outfile%.conf}

# horrendous sed monster to make these jobs run as our user 
  cat ${file} | \
    sed "s:    :  :g" | \
    sed "s:test -x .* || \(.*\):su - ${CHEF_SERVER_USER} -c \"which ${service}\" || \1:" | \
    sed "s:exec /usr/bin/${service} \(.*\):script\n  su - ${CHEF_SERVER_USER} -c \"${service} \1\"\nend script:" | \
    sudo tee /etc/init/${outfile} > /dev/null

# symlinking here means we get tab-complete in 'service foo start'-type stuff
# (among other things, I'm sure)
  sudo ln -sf /lib/init/upstart-job /etc/init.d/${service}
# actually start the thing
  sudo service ${service} start 2> /dev/null || sudo service ${service} restart
done

# set up the nginx vhosts to proxy this stuff
#cd ${STARTDIR}/files/nginx
#for file in `ls`
#do
#  NAME=`echo ${file} | tr "[:lower:]" "[:upper:]"`NAME

## @OrganizedGang explained this indirect reference voodoo to me
#  REPLACEMENT=${!NAME}
#  [ ${REPLACEMENT} ] || REPLACEMENT=${file}
#  cat ${file} | sed "s:${NAME}:${REPLACEMENT}:" |\
#    sudo tee /etc/nginx/sites-available/${REPLACEMENT} > /dev/null
#done

cd ${STARTDIR}
for line in "chef-server:4000:chef chef-webui:4040:chefwebui" 
do
  UPSTREAM=`echo ${line} | cut -d ':' -f 1`
  PORT=`echo ${line} | cut -d ':' -f 2`
  SERVERNAME=`echo ${line} | cut -d ':' -f 3`.`hostname -f`
  cat files/nginx/vhost.template |\
    sed "s:UPSTREAM:${UPSTREAM}:" |\
    sed "s:PORT:${PORT}:" |\
    sed "s:SERVERNAME:${SERVERNAME}:" |\
    sudo tee /etc/nginx/sites-available/${SERVERNAME} > /dev/null
  [ ${PORT} == "4040" ] && WEBUI="http://${SERVERNAME}"
  [ ${PORT} == "4000" ] && CHEFSERVER="http://${SERVERNAME}:4000"
  sudo ln -sf /etc/nginx/sites-available/${SERVERNAME} /etc/nginx/sites-enabled
done

sudo service nginx restart

# end

echo
echo "Chef-server is at ${CHEFSERVER}"
echo "Chef WebUI is at ${WEBUI}"
echo "WebUI login: admin/${WEBUI_PASSWORD}"
echo
EOF
end

bash "configure_knife" do
user "#{node[:chef][:user]}"
code <<-EOF

# Next run the knife configure command, and pass the -i flag so the initial client that will be used to authenticate with the API.
cd #{node[:chef][:base_dir]}
./knife-config.sh

# verify knife can talk to the server
knife client list
knife cookbook list
EOF
end

bash "configure_ironfan" do
user "#{node[:chef][:user]}"
code <<-EOF
cp /home/#{node[:chef][:user]}/src/kthfs-ws/distribute/.chef/knife.rb .chef/

mkdir -p /home/node[:chef][:user]/tmp/.ironfan-clusters

cd /home/node[:chef][:user]/
knife cookbook upload -a
for role in /home/node[:chef][:user]/cookbooks/roles/*.rb
do 
  knife role from file $role 
done

EOF
end

